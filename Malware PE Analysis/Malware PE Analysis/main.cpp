/*
* Project: Malware PE Analysis
* File: main.cpp
*
* Author: Matthew Todd Geiger
*
* Time: 3:00
*
* Brief: This file contains the main program structure
*/

#include "defs.h"

HWND hWnd = NULL;

// Const because why not
int main(const int argc, const char *argv[]) {
	hWnd = GetForegroundWindow();

	DWORD dwFileSize = NULL;

	PVOID	pBuffer		= NULL;
	HANDLE	hFile		= NULL;

	PIMAGE_DOS_HEADER		pDosHeader		= NULL;
	PIMAGE_NT_HEADERS		pNtHeaders		= NULL;
	PIMAGE_FILE_HEADER		pFileHeader		= NULL;
	PIMAGE_OPTIONAL_HEADER	pOptionalHeader = NULL;
	PIMAGE_SECTION_HEADER	pSectionHeader	= NULL;

	// Open file
	hFile = CreateFile(szFile,
		GENERIC_READ | GENERIC_WRITE,			//Generic Read and Write
		FILE_SHARE_READ | FILE_SHARE_WRITE,
		NULL, OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL,					// No extended attributes
		NULL);
	if (hFile == INVALID_HANDLE_VALUE) {
		fprintf(stderr, "Error Opening File... Error Code: 0x%X\n", GetLastError());
		Pause((char *)"Press Any Key To Continue...");
		return EXIT_FAILURE; // 1
	}

	// Gather File size
	dwFileSize = GetFileSize(hFile, NULL);
	if (dwFileSize == INVALID_FILE_SIZE) {
		fprintf(stderr, "Error Locating File Size...\n");

		CloseHandle(hFile);

		Pause((char *)"Press Any Key To Continue...");
		return EXIT_FAILURE; // 1
	}

	/*
	 * Successfully opening the file and gathering the size data
	 * should be enough error checking on the file reading process
	 */

	 // Copy file memory
	pBuffer = VirtualAlloc(NULL, dwFileSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	if (!ReadFile(hFile, pBuffer, dwFileSize, NULL, NULL)) {
		fprintf(stderr, "Error Assigning Buffer...\n");

		CloseHandle(hFile);
		VirtualFree(pBuffer, 0, MEM_RELEASE);

		Pause((char *)"Press Any Key To Continue...");
		return EXIT_FAILURE; // 1
	}

	// Clean Up Handle
	CloseHandle(hFile);

	// Check for clues in DOS HEADER
	pDosHeader = DosHeader((DWORD_PTR)pBuffer);
	if (!pDosHeader) {
		fprintf(stderr, "Error Reading DOS Header...\n");

		VirtualFree(pBuffer, 0, MEM_RELEASE);

		Pause((char *)"Press Any Key To Continue...");
		return EXIT_FAILURE;
	}

	// Check NT Headers
	pNtHeaders = NtHeaders((DWORD_PTR)pBuffer + pDosHeader->e_lfanew);
	if (!pNtHeaders) {
		fprintf(stderr, "Error Reading \"NT Headers\" Structure...\n");

		VirtualFree(pBuffer, 0, MEM_RELEASE);

		Pause((char *)"Press Any Key To Continue...");
		return EXIT_FAILURE;
	}
	
	// Check File Header
	pFileHeader = FileHeader((DWORD_PTR)&(pNtHeaders->FileHeader));
	if (!pFileHeader) {
		fprintf(stderr, "Error Reading File Header Structure...\n");

		VirtualFree(pBuffer, 0, MEM_RELEASE);

		Pause((char *)"Press Any Key To Continue...");
		return EXIT_FAILURE;
	}

	// Check Section Header
	pOptionalHeader = (PIMAGE_OPTIONAL_HEADER)&(pNtHeaders->OptionalHeader);
	pSectionHeader = SectionHeader((DWORD_PTR)(pOptionalHeader + 1), pFileHeader->NumberOfSections, pOptionalHeader->FileAlignment);
	if (!pSectionHeader) {
		fprintf(stderr, "Error Reading Section Header Structure...\n");

		VirtualFree(pBuffer, 0, MEM_RELEASE);

		Pause((char *)"Press Any Key To Continue...");
		return EXIT_FAILURE;
	}

	pOptionalHeader = OptionalHeader((DWORD_PTR)&(pNtHeaders->OptionalHeader), (DWORD_PTR)pBuffer, dwFileSize);
	// Check Optional Header
	if (!pOptionalHeader) {
		fprintf(stderr, "Error Reading Optional Header Structure...\n");

		VirtualFree(pBuffer, 0, MEM_RELEASE);

		Pause((char *)"Press Any Key To Continue...");
		return EXIT_FAILURE;
	}

	// Clean Up
	VirtualFree(pBuffer, 0, MEM_RELEASE);

	Pause((char *)"\nPress Any Key To Continue...");
	return EXIT_SUCCESS; // 0
}

void Pause(char *szPhrase) {
	printf("%s\n", szPhrase);

	// Wait For Key Press
	for (int i = 3; !(GetAsyncKeyState(i) >> 15) ||
		!(GetForegroundWindow() == hWnd); i++) {
		(i >= 254) ? i = 3 : i = i;
	}
}